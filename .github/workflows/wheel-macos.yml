name: Build macOS wheels
# May be combined with Windows action later

on: [push]

jobs:
  build:
    runs-on: macos-latest

    env:
      # OS X 10.9 is the oldest version with libc++.
      # See https://github.com/MacPython/wiki/wiki/Spinning-wheels#changing-your-wheel-compatibility
      MACOSX_DEPLOYMENT_TARGET: 10.9

    strategy:
      fail-fast: true
      matrix:
        python-version: [3.8]
        python-arch: [x64]
        boost-version: [1_72_0]
        include:
          - python-version: 3.8
            numpy-version: 1.17.3

    name: macOS Python ${{ matrix.python-version }} ${{ matrix.python-arch }}

    steps:

      - uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git submodule sync --recursive
          git submodule update --init --force --recursive --depth=1

      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.python-arch }}

      - name: Install tools
        run: |
          brew install swig

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel
          python -m pip install numpy==${{ matrix.numpy-version }}

      - name: Build Boost
        run: |
          BOOST_VER=${{ matrix.boost-version }}
          BOOST_TGZ=boost_$BOOST_VER.tar.gz
          curl -LO https://dl.bintray.com/boostorg/release/${BOOST_VER//_/.}/source/$BOOST_TGZ
          tar xzf $BOOST_TGZ
          cd boost_$BOOST_VER
          ./bootstrap.sh
          ./b2 --with-system --with-thread --with-date_time link=static architecture=x86 address-model=64

      - name: Build wheel
        run: |
          BOOST_ROOT=./boost_${{ matrix.boost-version }}
          export CC=clang
          export CXX=clang++
          export CFLAGS=-fvisibility=hidden # Match Boost build
          export CFLAGS="$CFLAGS -Wno-unused-variable" # swig_obj
          python setup.py build_ext -I$BOOST_ROOT -L$BOOST_ROOT/stage/lib -j2
          python setup.py build
          python setup.py bdist_wheel

      - name: Log undefined symbols
        run: |
          PYMOD=$(echo build/lib.*/_pymmcore.*.so)

          echo "$PYMOD:"
          echo 'Weak symbols:'
          nm -mu $PYMOD |c++filt |grep ' weak ' # This is never empty
          echo '-- end of weak symbols --'

          echo 'Undefined symbols not containing Py:'
          # We have bash's -o pipefail set; make empty grep result mean success
          ! nm -mu $PYMOD |c++filt |grep 'dynamically looked up' |grep -v _Py
          echo '-- end of non-Py dynamically looked up symbols --'

      - uses: actions/upload-artifact@v1
        with:
          name: wheel
          path: dist
